1. Создание проекта в PyCharm
Откройте PyCharm и создайте новый проект, назвав его по своему усмотрению (например, MyDjangoProject).

2. Установка Django в виртуальное окружение
Откройте терминал в PyCharm.
Перейдите в директорию Вашего проекта.
Создайте виртуальное окружение:

python -m venv venv
Активируйте виртуальное окружение:
На Windows:
venv\Scripts\activate

На macOS и Linux:
source venv/bin/activate

Установите Django:
pip install django

3. Создание проекта Django
Создайте проект Django с именем UrbanDjango:
django-admin startproject UrbanDjango

4. Создание приложений
Перейдите в директорию проекта:
cd UrbanDjango

Создайте приложения example1, example2, example3:
django-admin startapp example1
django-admin startapp example2
django-admin startapp example3

5. Создание файла зависимостей requirements.txt
Создайте файл requirements.txt и добавьте в него зависимости:
pip freeze > requirements.txt

6. Запуск сервера
Запустите сервер:
python manage.py runserver
Проверьте работоспособность, перейдя в браузере по адресу http://127.0.0.1:8000/.

7. Создание репозитория на GitHub
Создайте новый репозиторий на GitHub.
В терминале выполните следующие команды, чтобы инициализировать Git, добавить файлы и сделать коммит:
git init
git add .
git commit -m "Initial commit"
git branch -M main
git remote add origin <URL Вашего репозитория>
git push -u origin main

Примечания
Убедитесь, что папка виртуального окружения (например, venv) не добавлена в репозиторий, добавив её в файл .gitignore. Пример содержимого .gitignore:

venv/
__pycache__/
*.pyc
*.pyo
*.pyd
*.db
*.sqlite3


git init
git add .
git commit -m "Initial commit"
git branch -M main
git remote add origin https://user@github.com/PavelVNazarov/DjangoProjects.git
git branch -M main
git push -u origin main


git init
git add .
git commit -m "Initial commit"
git branch -M main
git remote add origin https://github.com/PavelVNazarov/DjangoProjects/tree/main
git branch -M main
git push -u origin main

Если Ваш проект уже существует на GitHub, и Вы хотите синхронизировать изменения, выполните следующие шаги:

1. Переход в директорию Вашего проекта
Откройте терминал (или используйте встроенный терминал в PyCharm) и перейдите в директорию Вашего проекта.
cd путь_к_вашему_проекту

2. Инициализация Git (если это еще не сделано)
Если Вы не инициализировали Git ранее, выполните команду:
git init

3. Добавление изменений
Добавьте изменения в индекс Git:
git add .

4. Коммит изменений
Создайте новый коммит с описанием Ваших изменений:
git commit -m "Ваше сообщение о коммите"

5. Подключение к удаленному репозиторию
Если Ваш проект уже имеет удаленный репозиторий, Вы можете подключиться к нему с помощью команды:
git remote add origin <URL Вашего репозитория>
Если удаленный репозиторий уже настроен, то этот шаг можно пропустить.

6. Обновление репозитория
Если в удаленном репозитории есть изменения, выполните следующие команды, чтобы их получить и объединить:
git pull origin main
Обратите внимание: если Ваша основная ветка называется не main, замените на нужное имя (например, master).

7. Пуш изменений
Теперь Вы можете загрузить (пушить) Ваши изменения в удаленный репозиторий:
git push origin main

8. Проверка изменений на GitHub
Перейдите на страницу Вашего репозитория на GitHub, чтобы убедиться, что изменения были успешно загружены.

Примечание
Перед пушем всегда полезно выполнять git pull, чтобы избежать конфликтов, особенно если несколько человек работают над проектом.

git init
git add .
git commit -m "Ваше сообщение о коммите"
git remote add origin <URL Вашего репозитория>
git pull origin main
git push origin main

git init
git add .
git commit -m "Второе попытка"
git remote add origin https://github.com/PavelVNazarov/DjangoProjects.git
git pull origin main
git push origin main

Если Вы сталкиваетесь с ошибкой remote origin already exists, это означает, что удалённый репозиторий уже был добавлен в Ваш локальный репозиторий. Чтобы решить эту проблему, Вы можете выполнить следующие шаги:

Проверьте текущие удалённые репозитории:
Выполните команду:

git remote -v
Это покажет список добавленных удалённых репозиториев.

Удалите существующий удалённый репозиторий:
Если Вы хотите изменить origin, сначала удалите существующий удалённый репозиторий с помощью команды:

git remote remove origin
Добавьте новый удалённый репозиторий:
Теперь Вы можете добавить новый удалённый репозиторий:

git remote add origin <URL Вашего репозитория>
Пуш Ваших изменений:
После этого выполните команду:

git push -u origin main
или замените main на имя Вашей ветки, если используете другую.

Если проект уже существует на GitHub
Если у Вас уже есть проект на GitHub и Вы хотите обновить его локальную версию:

Проверьте, что в удалённом репозитории нет изменений, которые отсутствуют в Вашем локальном.

Сделайте git pull, чтобы обновить локальный репозиторий:

git pull origin main
Это объединит изменения с удалённого репозитория с вашим локальным.

Добавьте и зафиксируйте свои изменения:

git add .
git commit -m "Ваше сообщение о коммите"
Отправьте изменения на GitHub:

git push origin main
Устранение проблемы с repository not found
Если Вы видите сообщение repository not found, это может быть связано с неправильным URL. Убедитесь, что URL Вашего репозитория на GitHub правильный и соответствует формату:

https://github.com/ваш_логин/имя_репозитория.git
Проверьте также, что у Вас есть необходимые права доступа к репозиторию. Если это приватный репозиторий, убедитесь, что Вы аутентифицированы с правильными учетными данными.

git remote remove origin
git remote add origin https://github.com/PavelVNazarov/DjangoProjects.git
git push -u origin main
git add .
git commit -m "Еще раз"
git push origin main


