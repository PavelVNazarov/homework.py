Вот пошаговая инструкция для выполнения Вашей задачи "Сила DTL":

1. Подготовка
1.1. Скопируйте шаблоны:

Скопируйте все шаблоны из предыдущего задания в новую директорию templates/fourth_task/.

2. Создайте новый шаблон menu.html
2.1. Создание menu.html:

Создайте новый файл menu.html в директории templates/fourth_task/.

<!-- templates/fourth_task/menu.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block pagename %}Page Title{% endblock %}</title>
</head>
<body>
    <div class="menu">
        {% block menu %}
        <ul>
            <li><a href="{% url 'index' %}">Home</a></li>
            <li><a href="{% url 'games' %}">Games</a></li>
            <li><a href="{% url 'cart' %}">Cart</a></li>
            <li><a href="{% url 'shop' %}">Shop</a></li>
            <li><a href="{% url 'platform' %}">Platform</a></li>
        </ul>
        {% endblock %}
    </div>
    <div class="content">
        {% block content %}
        <!-- Default content goes here -->
        {% endblock %}
    </div>
</body>
</html>

3. Создание приложения task4
3.1. Создайте приложение:

Создайте новое приложение task4 с помощью команды:

python manage.py startapp task4
3.2. Перенос представлений:

Скопируйте представления из task3/views.py в task4/views.py. Измените в них контексты, чтобы использовать список games.

Пример изменения в views.py:

# task4/views.py
from django.shortcuts import render

def games_view(request):
    games = ['Atomic Heart', 'Cyberpunk 2077']
    return render(request, 'fourth_task/games.html', {'games': games})

3.3. Обновите шаблоны:

Во всех шаблонах в fourth_task/ добавьте наследование от menu.html. Пример для games.html:

<!-- templates/fourth_task/games.html -->
{% extends 'fourth_task/menu.html' %}

{% block pagename %}Games{% endblock %}

{% block content %}
<h1>Games List</h1>
<ul>
    {% for game in games %}
    <li>{{ game }}</li>
    {% endfor %}
</ul>
{% endblock %}

4. Обновите urls.py
4.1. Импортируйте представления:

В UrbanDjango/urls.py замените импорты представлений из task3 на импорты из task4.

Пример:

# UrbanDjango/urls.py
from django.urls import path
from task4.views import games_view, cart_view, index_view

urlpatterns = [
    path('', index_view, name='index'),
    path('games/', games_view, name='games'),
    path('cart/', cart_view, name='cart'),
    # ...
]

5. Подключите приложение task4 к проекту
5.1. Измените settings.py:

В файле settings.py убедитесь, что task4 добавлено в INSTALLED_APPS.

# UrbanDjango/settings.py
INSTALLED_APPS = [
    # ...
    'task4',
]

6. Запустите сервер
6.1. Запустите сервер:

python manage.py runserver

6.2. Проверьте приложение:

Перейдите по соответствующим URL (например, /, /games/, /cart/, и т.д.) и убедитесь, что страницы отображаются корректно.

7. Проверка на ошибки
7.1. Если страницы не отображаются как ожидалось, проверьте:

Правильность передачи контекстов в представлениях.
Наличие и правильность ссылок в шаблонах.
Корректность путей к шаблонам.

<ul>
    {% for game in games %}
    <li>{{ game }}</li>
    {% endfor %}
</ul>
