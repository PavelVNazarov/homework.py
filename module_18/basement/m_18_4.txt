Шаг 1: Создание нового приложения
Сначала создайте новое приложение task4:
python manage.py startapp task4

Шаг 2: Перенос представлений
Перенесите представления из task3/views.py в task4/views.py. Измените их, чтобы они передавали данные в нужном формате.
# task4/views.py
from django.shortcuts import render

def main_page(request):
    return render(request, 'fourth_task/platform.html', {'pagename': 'Главная страница'})

def shop_page(request):
    games = ['Atomic Heart', 'Cyberpunk 2077', 'Doom Eternal']
    return render(request, 'fourth_task/games.html', {'games': games, 'pagename': 'Магазин'})

def cart_page(request):
    return render(request, 'fourth_task/cart.html', {'pagename': 'Корзина'})
    
Шаг 3: Создание шаблона menu.html
Создайте файл menu.html в папке templates/fourth_task/:
<!-- templates/fourth_task/menu.html -->
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>{% block pagename %}Сайт{% endblock %}</title>
</head>
<body>
    <nav>
        <ul>
            <li><a href="/">Главная</a></li>
            <li><a href="/shop/">Магазин</a></li>
            <li><a href="/cart/">Корзина</a></li>
        </ul>
    </nav>

    <h1>{% block pagename %}Заголовок{% endblock %}</h1>

    <div>
        {% block content %}{% endblock %}
    </div>
</body>
</html>

Шаг 4: Обновление остальных шаблонов
Создайте platform.html, games.html, и cart.html в директории fourth_task. В каждом из них используйте наследование шаблона.

Пример для platform.html:
<!-- templates/fourth_task/platform.html -->
{% extends 'fourth_task/menu.html' %}

{% block content %}
<p>Добро пожаловать на игровую платформу!</p>
{% endblock %}

Пример для games.html:

<!-- templates/fourth_task/games.html -->
{% extends 'fourth_task/menu.html' %}

{% block content %}
<ul>
    {% for game in games %}
        <li>
            {{ game }} <button>Купить</button>
        </li>
    {% endfor %}
</ul>
<a href="/">Назад на главную</a>
{% endblock %}

Пример для cart.html:

<!-- templates/fourth_task/cart.html -->
{% extends 'fourth_task/menu.html' %}

{% block content %}
<p>Ваша корзина пуста. Добавьте товары в корзину.</p>
<a href="/">Назад на главную</a>
{% endblock %}

Шаг 5: Обновление urls.py
Обновите urls.py Вашего проекта, чтобы подключить новое приложение task4.
# urls.py
from django.urls import path
from task4.views import main_page, shop_page, cart_page

urlpatterns = [
    path('', main_page, name='main_page'),
    path('shop/', shop_page, name='shop_page'),
    path('cart/', cart_page, name='cart_page'),
]

Шаг 6: Подключение приложения к проекту
Не забудьте добавить task4 в Ваш settings.py:
INSTALLED_APPS = [
    ...,
    'task4',
]

Шаг 7: Запуск сервера
Запустите сервер с помощью команды:
python manage.py runserver
Теперь, посетив соответствующие URL, Вы сможете увидеть свои страницы с использованием DTL.
Каждая страница будет наследоваться от menu.html, и будет использовать общие элементы меню.


Для выполнения задания по освоению синтаксиса и инструментов DTL, следуйте этой пошаговой инструкции:

Шаг 1: Подготовка проекта
Создание новой директории для шаблонов:

Перейдите в директорию Вашего проекта.
Создайте новую директорию fourth_task внутри templates:
Bash
Копировать
mkdir templates/fourth_task
Копирование шаблонов:

Скопируйте все шаблоны из предыдущего задания в новую директорию:
Bash
Копировать
cp templates/previous_task/* templates/fourth_task/
Создание нового шаблона:

Создайте файл menu.html в директории templates/fourth_task:
Bash
Копировать
touch templates/fourth_task/menu.html
Шаг 2: Создание приложения
Создание нового приложения task4:

Выполните команду для создания приложения:
Bash
Копировать
python manage.py startapp task4
Перенос представлений из task3 в task4:

Откройте файл представлений из task3 и скопируйте нужные функции в файл views.py Вашего нового приложения task4.
Обновление путей к шаблонам:

В файле views.py переназначьте пути к шаблонам и убедитесь, что они теперь указывают на директорию fourth_task.
Шаг 3: Обновление маршрутов
Обновите файл urls.py:

В файле urls.py приложения task4 сделайте те же импорты, что и в task3, но из task4. Убедитесь, что названия представлений остались теми же.
Удалите старые импорты из task3.
Подключите приложение task4:

Убедитесь, что приложение task4 добавлено в настройки Вашего проекта, в файле settings.py добавьте 'task4' в список INSTALLED_APPS.
Шаг 4: Запуск сервера
Запустите сервер:

Bash
Копировать
python manage.py runserver
Проверьте отображение страниц:

Перейдите по необходимым URL-адресам и убедитесь, что все страницы отображаются корректно.
Шаг 5: Изменения в представлениях
Измените словарь context:
Найдите представление, где Вы использовали context, и измените его следующим образом:
Python
Копировать
context = {'games': ['Atomic Heart', 'Cyberpunk 2077']}
Шаг 6: Изменения в шаблонах
Создание шаблона menu.html:

Откройте файл menu.html и создайте блоки:
HTML, XML
Копировать
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>{% block pagename %}Заголовок{% endblock %}</title>
</head>
<body>
    <nav>
        <ul>
            <li><a href="{% url 'home' %}">Главная</a></li>
            <li><a href="{% url 'shop' %}">Магазин</a></li>
            <li><a href="{% url 'cart' %}">Корзина</a></li>
        </ul>
    </nav>
    <div>
        {% block content %}
        {% endblock %}
    </div>
</body>
</html>
Изменения в остальных шаблонах:

В остальных шаблонах используйте extends от menu.html, устанавливайте заголовок страницы и содержание.
Пример для страницы "Магазин":

HTML, XML
Копировать
{% extends 'fourth_task/menu.html' %}

{% block pagename %}Магазин{% endblock %}

{% block content %}
<h1>Добро пожаловать в магазин!</h1>
<!-- Контент магазина -->
{% endblock %}
Шаг 7: Ссылки в шаблонах
Убедитесь, что все ссылки в шаблонах используют абсолютные маршруты, используя {% url 'название_представления' %} для создания более гибкой навигации.

Шаг 8: Тестирование
Проверьте все страницы:
Проверьте, что каждая страница отображает правильный заголовок и содержание, и что меню остается неизменным на всех страницах.
Заключение
Если Вы выполнили все шаги правильно, у Вас должен быть работающий проект на Django с внедрением DTL, который включает шаблоны и представления, функциональность динамического представления списка игр и общее оформление с меню навигации. Если Вы столкнулись с проблемами, проверьте на наличие опечаток или некорректных путей.
