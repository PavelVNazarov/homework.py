Шаг 1: Создание виртуального окружения и установка Django
Создание виртуального окружения:
virtualenv myenv

Активация виртуального окружения:
На Windows:
myenv\Scripts\activate
На macOS и Linux:
source myenv/bin/activate

Установка Django:
pip install django
Объяснение
Ранее установленные библиотеки не запустятся внутри созданного виртуального окружения, так как каждое окружение изолировано от системы и других окружений. Это обеспечивает возможность использования разных версий библиотек для различных проектов, предотвращая конфликты.

Шаг 2: Создание шаблона проекта Django
Создание проекта Django:
django-admin startproject myproject

Структура файлов, созданной в проекте:

manage.py: утилита для управления проектом (миграции, запуск сервера и т.д.).
myproject/: папка с настройками проекта, внутри которой находятся:
__init__.py: делает директорию пакетом Python.
settings.py: настройки самого проекта, такие как подключение к базе данных, установленные приложения и параметры безопасности.
urls.py: файлы маршрутизации (URL-адресов) для проекта.
asgi.py: точка входа для асинхронного сервера.
wsgi.py: точка входа для WSGI-сервера.

Шаг 3: Первоначальная миграция с базой данных
Выполнение миграции:
python manage.py migrate

Вывод в консоль и новые файлы
После выполнения миграции в консоли Вы увидите список миграций, которые были применены, и отображение изменений, таких как создание таблиц для моделей по умолчанию.

Новые файлы:

В папке myproject/migrations/ будут созданы миграции, например, 0001_initial.py, которые описывают изменения в структуре базы данных.

Шаг 4: Создание двух приложений
Создание двух шаблонов приложений:

python manage.py startapp app_one
python manage.py startapp app_two

Структура файлов для каждого приложения:
В каждом приложении будет создана своя структура файлов:

migrations/: папка для хранения миграций конкретного приложения.
admin.py: файл для определения административного интерфейса для моделей.
apps.py: конфигурация приложения.
models.py: определение моделей, которые будут использоваться в базе данных.
tests.py: тесты для приложения.
views.py: обработка запросов и логика представления.

Выполнение миграции с базами данных:
python manage.py migrate
