Код построчно и по блокам. Это поможет понять, что делает каждый оператор.

Импорт библиотек
Python
Копировать
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram import MemoryStorage
from aiogram import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StateGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
Импортируются необходимые библиотеки для работы с Telegram ботом через aiogram.
asyncio используется для работы с асинхронным программированием.
Bot, Dispatcher, и types - ключевые компоненты для создания и управления ботом.
Конфигурация бота
Python
Копировать
API_TOKEN = 'YOUR_API_TOKEN'  # Замените 'YOUR_API_TOKEN' на токен Вашего бота

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
API_TOKEN - токен Вашей Telegram бота, который нужно заменить на Ваш собственный.
bot и dp создают экземпляр бота и диспетчера для управления сообщениями и состояниями.
Определение состояний
Python
Копировать
class UserState(StateGroup):
    age = State()
    growth = State()
    weight = State()
Класс UserState определяет состояния, в которых может находиться пользователь (возраст, рост, вес).
Создание клавиатур
Python
Копировать
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
button_calculate = KeyboardButton('Рассчитать')
button_info = KeyboardButton('Информация')
keyboard.add(button_calculate, button_info)

inline_keyboard = InlineKeyboardMarkup()
button_calories = InlineKeyboardButton('Рассчитать норму калорий', callback_data='calories')
button_formulas = InlineKeyboardButton('Формулы расчёта', callback_data='formulas')
inline_keyboard.add(button_calories, button_formulas)
Создаются обычная клавиатура (keyboard) и инлайн-клавиатура (inline_keyboard).
На обычной клавиатуре два кнопки: Рассчитать и Информация.
На инлайн-клавиатуре две кнопки: Рассчитать норму калорий и Формулы расчёта, каждая из которых отправляет callback_data.
Обработчики команд и сообщений
Python
Копировать
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    response_text = 'Привет! Я бот, помогающий твоему здоровью.'
    await message.reply(response_text, reply_markup=keyboard)
Обработчик команды /start, который отправляет приветственное сообщение и отображает обычную клавиатуру.
Python
Копировать
@dp.message_handler(lambda message: message.text == 'Рассчитать')
async def main_menu(message: types.Message):
    await message.reply('Выберите опцию:', reply_markup=inline_keyboard)
Обработчик, который активируется при нажатии кнопки "Рассчитать" и предлагает выбрать опции с помощью инлайн-клавиатуры.
Обработка нажатия инлайн-кнопок
Python
Копировать
@dp.callback_query_handler(lambda call: call.data == 'calories')
async def set_age(call: types.CallbackQuery):
    await call.message.reply('Введите свой возраст:')
    await UserState.age.set()  # Устанавливаем состояние
Обработчик для нажатия на кнопку "Рассчитать норму калорий". Он запрашивает возраст и устанавливает состояние age.
Состояния пользователя
Python
Копировать
@dp.message_handler(state=UserState.age)
async def set_growth(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)  # Сохраняем возраст
    await message.reply('Введите свой рост (в см):')
    await UserState.growth.set()  # Переход к следующему состоянию
Получаем возраст, обновляем состояние и переходим к следующему шагу - запросу роста.
Python
Копировать
@dp.message_handler(state=UserState.growth)
async def set_weight(message: types.Message, state: FSMContext):
    await state.update_data(growth=message.text)  # Сохраняем рост
    await message.reply('Введите свой вес (в кг):')
    await UserState.weight.set()  # Переход к следующему состоянию
Аналогично, получаем рост и запрашиваем вес.
Python
Копировать
@dp.message_handler(state=UserState.weight)
async def send_calories(message: types.Message, state: FSMContext):
    await state.update_data(weight=message.text)  # Сохраняем вес

    data = await state.get_data()  # Получаем все сохраненные данные
    age = int(data.get('age'))
    growth = int(data.get('growth'))
    weight = int(data.get('weight'))

    # Формула Миффлина - Сан Жеора для женщин
    calories = 10 * weight + 6.25 * growth - 5 * age + 161  # Адаптировать для мужчин при необходимости

    await message.reply(f'Ваша норма калорий: {calories:.2f} ккал')
    await state.finish()  # Завершаем состояние
Получаем и обрабатываем вес, затем рассчитываем норму калорий по формуле. Результат отправляется пользователю, состояние завершается.
Обработка запросов на формулы
Python
Копировать
@dp.callback_query_handler(lambda call: call.data == 'formulas')
async def get_formulas(call: types.CallbackQuery):
    message = "Формула Миффлина-Сан Жеора:\n\n" \
              "Для женщин: 10 * вес (кг) + 6.25 * рост (см) - 5 * возраст (лет) + 161\n" \
              "Для мужчин: 10 * вес (кг) + 6.25 * рост (см) - 5 * возраст (лет) + 5"
    await call.message.reply(message)
Обработчик для кнопки "Формулы расчёта", который отправляет информацию о формуле расчёта калорий.
Общая информация о боте
Python
Копировать
@dp.message_handler(lambda message: message.text == 'Информация')
async def info(message: types.Message):
    await message.reply('Информация о боте: Я предназначен для расчета калорий и улучшения Вашего здоровья.')
Обработчик для кнопки "Информация", возвращает описание бота.
Обработка незанятых сообщений
Python
Копировать
@dp.message_handler(lambda message: True)
async def all_messages(message: types.Message):
    await message.reply('Введите команду /start или нажмите на кнопку, чтобы начать общение.')
Этот обработчик срабатывает на любое другое сообщение и предлагает пользователю начать с команды /start или кнопок.
Запуск бота
Python
Копировать
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
Запускает бота и начинает опрос Telegram-сервера на предмет новых сообщений.
