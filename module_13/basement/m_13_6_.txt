Код по частям, объясняя каждую строку и оператор:

Импорт библиотек

import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import asyncio: Импортируем модуль для работы с асинхронными операциями.
from aiogram import Bot, Dispatcher, types: Импортируем классы для создания бота и управления сообщениями.
from aiogram import executor: Импортируем executor для запуска бота.
from aiogram.dispatcher import FSMContext: Импортируем контекст управления состоянием (Finite State Machine).
from aiogram.dispatcher.filters.state import State, StatesGroup: Импортируем классы для определения состояний в FSM.
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton: Импортируем классы для создания клавиатур.
from aiogram.contrib.fsm_storage.memory import MemoryStorage: Импортируем хранилище в памяти для управления состоянием.
Инициализация бота

API_TOKEN = '7528963854:AAGLegRWedP3Wg4Q9ny07GKksOo01ebDo70'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
API_TOKEN: Токен Вашего бота, полученный от BotFather.
bot = Bot(token=API_TOKEN): Инициализация бота с использованием токена.
dp = Dispatcher(bot, storage=MemoryStorage()): Создание диспетчера для обработки входящих сообщений и состояний, используем хранилище в памяти.
Определение состояний

class UserState(StatesGroup):
    age = State()
    growth = State()
    weight = State()
class UserState(StatesGroup): Создание группы состояний для пользователя.
age, growth, weight = State(): Определение состояний для хранения возраста, роста и веса пользователя.
Создание клавиатур

keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
button_calculate = KeyboardButton('Рассчитать')
button_info = KeyboardButton('Информация')
keyboard.add(button_calculate, button_info)
keyboard = ReplyKeyboardMarkup(resize_keyboard=True): Создание клавиатуры, которая будет показываться пользователю.
button_calculate = KeyboardButton('Рассчитать'): Создаем кнопку "Рассчитать".
button_info = KeyboardButton('Информация'): Создаем кнопку "Информация".
keyboard.add(button_calculate, button_info): Добавляем кнопки на клавиатуру.
Inline-клавиатура

key_b = InlineKeyboardMarkup()
button_inlin = InlineKeyboardButton(text=' ', callback_data=' ')
key_b.add(button_inlin)
key_b = InlineKeyboardMarkup(): Создаем новую inline-клавиатуру.
button_inlin = InlineKeyboardButton(text=' ', callback_data=' '): Создаем одну кнопку, но без текста и данных. Скорее всего, это просто для примера.
key_b.add(button_inlin): Добавляем созданную кнопку на inline-клавиатуру.
Команда /start

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    response_text = 'Привет! Я бот, помогающий твоему здоровью.'
    await message.reply(response_text, reply_markup=keyboard)
@dp.message_handler(commands=['start']): Декоратор для обработки команды /start.
async def start(message: types.Message): Асинхронная функция-обработчик.
response_text = 'Привет! Я бот, помогающий твоему здоровью.': Сообщение, которое будет отправлено пользователю.
await message.reply(response_text, reply_markup=keyboard): Отправляем сообщение с кнопками.
Обработка кнопки "Рассчитать"

@dp.message_handler(lambda message: message.text == 'Рассчитать')
async def set_age(message: types.Message):
    await message.reply('Введите свой возраст:')
    await UserState.age.set()  # Устанавливаем состояние
@dp.message_handler(lambda message: message.text == 'Рассчитать'): Декоратор, который срабатывает, когда пользователь нажимает кнопку "Рассчитать".
async def set_age(message: types.Message): Функция-обработчик, которая запрашивает возраст.
await message.reply('Введите свой возраст:'): Запрос на ввод возраста.
await UserState.age.set(): Устанавливаем состояние для ввода возраста.
Обработка ввода возраста

@dp.message_handler(state=UserState.age)
async def set_growth(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)  # Сохраняем возраст
    await message.reply('Введите свой рост (в см):')
    await UserState.growth.set()  # Переход к следующему состоянию
@dp.message_handler(state=UserState.age): Декоратор, который срабатывает, когда пользователь вводит свой возраст.
async def set_growth(message: types.Message, state: FSMContext): Функция, которая обрабатывает ввод роста.
await state.update_data(age=message.text): Сохраняем введенный возраст в состоянии.
await message.reply('Введите свой рост (в см):'): Запрашиваем ввод роста.
await UserState.growth.set(): Переход к следующему состоянию – росту.
Обработка ввода роста

@dp.message_handler(state=UserState.growth)
async def set_weight(message: types.Message, state: FSMContext):
    await state.update_data(growth=message.text)  # Сохраняем рост
    await message.reply('Введите свой вес (в кг):')
    await UserState.weight.set()  # Переход к следующему состоянию
Похожие операции, что и в предыдущем блоке. Сохраняем рост и переходим к вводу веса.

Обработка ввода веса и расчёт калорий

@dp.message_handler(state=UserState.weight)
async def send_calories(message: types.Message, state: FSMContext):
    await state.update_data(weight=message.text)  # Сохраняем вес

    data = await state.get_data()  # Получаем все сохраненные данные
    age = int(data.get('age'))
    growth = int(data.get('growth'))
    weight = int(data.get('weight'))

    # Формула Миффлина - Сан Жеора для женщин
    calories = 10 * weight + 6.25 * growth - 5 * age + 161  # Можно адаптировать для мужчин

    await message.reply(f'Ваша норма калорий: {calories:.2f} ккал')
    await state.finish()  # Завершаем состояние
await state.update_data(weight=message.text): Сохраняем введённый вес.
data = await state.get_data(): Получаем все сохраненные данные (возраст, рост, вес).
Затем происходит расчет калорий с использованием формулы Миффлина-Сан Жеора, которая может быть адаптирована.
await message.reply(f'Ваша норма калорий: {calories:.2f} ккал'): Отправляем пользователю расчет калорий.
await state.finish(): Завершаем текущее состояние.
Обработка кнопки "Информация"

@dp.message_handler(lambda message: message.text == 'Информация')
async def info(message: types.Message):
    await message.reply('Информация о боте: Я предназначен для расчета калорий и улучшения Вашего здоровья.')
Декоратор и функция для обработки нажатия кнопки "Информация". Отправляет сообщение о предназначении бота.
Обработка других сообщений

@dp.message_handler(lambda message: True)
async def all_messages(message: types.Message):
    await message.reply('Введите команду /start или нажмите на кнопку, чтобы начать общение.')
Обрабатывает все другие сообщения, которые не попадают под предыдущие обработчики.
Запуск бота

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
Запускает бота на прослушивание новых сообщений и игнорирует старые (включая новые обновления).
