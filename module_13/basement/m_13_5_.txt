Импорт библиотек:

import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram import MemoryStorage
from aiogram import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StateGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
Импортируются необходимые модули из библиотеки aiogram, которая используется для создания ботов Telegram с поддержкой асинхронного программирования.
Инициализация бота:

API_TOKEN = 'YOUR_API_TOKEN'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
API_TOKEN — токен для доступа к API Telegram, подставьте свой токен.
Создается объект Bot и диспетчер Dispatcher. Хранение состояния реализуется в памяти (временный вариант).
Определение состояний пользователя:

class UserState(StateGroup):
    age = State()
    growth = State()
    weight = State()
Создается класс состояний, используемый для управления состоянием пользователя во время взаимодействия с ботом (возраст, рост, вес).
Создание клавиатуры:

keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
button_calculate = KeyboardButton('Рассчитать')
button_info = KeyboardButton('Информация')
keyboard.add(button_calculate, button_info)
Создается пользовательская клавиатура с двумя кнопками: "Рассчитать" и "Информация", которая подстраивается под размер экрана.
Обработчик команды /start:

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    response_text = 'Привет! Я бот, помогающий твоему здоровью.'
    await message.reply(response_text, reply_markup=keyboard)
При выполнении команды /start бот отправляет приветственное сообщение и показывает клавиатуру с кнопками.
Обработчик нажатия кнопки "Рассчитать":

@dp.message_handler(lambda message: message.text == 'Рассчитать')
async def set_age(message: types.Message):
    await message.reply('Введите свой возраст:')
    await UserState.age.set()  # Устанавливаем состояние
Когда пользователь нажимает кнопку "Рассчитать", бот запрашивает возраст и устанавливает состояние для дальнейших вопросов.
Обработчик для состояния age:

@dp.message_handler(state=UserState.age)
async def set_growth(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)  # Сохраняем возраст
    await message.reply('Введите свой рост (в см):')
    await UserState.growth.set()  # Переход к следующему состоянию
Сохраняет введенный возраст и запрашивает рост.
Обработчик для состояния growth:

@dp.message_handler(state=UserState.growth)
async def set_weight(message: types.Message, state: FSMContext):
    await state.update_data(growth=message.text)  # Сохраняем рост
    await message.reply('Введите свой вес (в кг):')
    await UserState.weight.set()  # Переход к следующему состоянию
Сохраняет рост и запрашивает вес.
Обработчик для состояния weight:

@dp.message_handler(state=UserState.weight)
async def send_calories(message: types.Message, state: FSMContext):
    await state.update_data(weight=message.text)  # Сохраняем вес

    data = await state.get_data()  # Получаем все сохраненные данные
    age = int(data.get('age'))
    growth = int(data.get('growth'))
    weight = int(data.get('weight'))

    # Формула Миффлина - Сан Жеора для женщин
    calories = 10 * weight + 6.25 * growth - 5 * age + 161  # Можно адаптировать для мужчин

    await message.reply(f'Ваша норма калорий: {calories:.2f} ккал')
    await state.finish()  # Завершаем состояние
Сохраняет вес, рассчитывает количество калорий по формуле и отправляет результат. После этого завершается состояние.
Обработчик для нажатия кнопки "Информация":

@dp.message_handler(lambda message: message.text == 'Информация')
async def info(message: types.Message):
    await message.reply('Информация о боте: Я предназначен для расчета калорий и улучшения Вашего здоровья.')
Отправляет информацию о боте, когда пользователь нажимает кнопку "Информация".
Обработчик для любых других сообщений:

@dp.message_handler(lambda message: True)
async def all_messages(message: types.Message):
    await message.reply('Введите команду /start или нажмите на кнопку, чтобы начать общение.')
Обрабатывает любые сообщения, не подходящие для других хэндлеров, и предлагает пользователю воспользоваться командами.
Запуск бота:

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
Запускает механизм получения обновлений и обработки сообщений.
Таким образом, бот выполняет функции по расчёту калорий на основе введённых пользователем данных и предоставляет интерактивные кнопки для взаимодействия.
