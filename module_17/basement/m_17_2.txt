1. Создание структуры проект

app/
    backend/
        db.py
    models/
        __init__.py
        task.py
        user.py
    routers/
        __init__.py
        task.py
        user.py
    main.py
    schemas.py
    
2. Модуль db.py
В этом файле создать базу данных и движок:

from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# Создаем движок с использованием SQLite
DATABASE_URL = 'sqlite:///taskmanager.db'
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})

# Создаем сессию
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Базовый класс для моделей
Base = declarative_base()

3. Модель Task в task.py
Создать в models/task.py модель Task:

from sqlalchemy import Column, Integer, String, Boolean, ForeignKey
from sqlalchemy.orm import relationship
from . import Base  # Импортируем базовый класс

class Task(Base):
    __tablename__ = 'tasks'

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True)
    content = Column(String)
    priority = Column(Integer, default=0)
    completed = Column(Boolean, default=False)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=False, index=True)
    slug = Column(String, unique=True, index=True)

    user = relationship('User', back_populates='tasks')

    
4. Модель User в user.py
Создать в models/user.py модель User:

from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import relationship
from . import Base  # Импортируем базовый класс

class User(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, index=True)
    firstname = Column(String)
    lastname = Column(String)
    age = Column(Integer)
    slug = Column(String, unique=True, index=True)

    tasks = relationship('Task', back_populates='user')

    
5. Импорт моделей в __init__.py
В models/__init__.py добавьте:

from .user import User 
from .task import Task

6. Создание таблиц
В main.py добавить код для создания таблиц:

from fastapi import FastAPI
from models import Base
from backend.db import engine

app = FastAPI()

# Создаем все таблицы в базе данных
Base.metadata.create_all(bind=engine)

@app.get('/')
def read_root():
    return {"message": "Welcome to Taskmanager"}
    
Запуск сервера

python -m uvicorn app.main:app --reload

Печать SQL-запросов (опционально)
Чтобы увидеть SQL-запросы - настроить уровень логирования SQLAlchemy:

import logging

logging.basicConfig()
logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)

Добавить этот код в main.py перед созданием применения FastAPI.
