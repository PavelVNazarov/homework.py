каждый модуль и его компоненты:

Структура проекта
Код
Копировать
app/
    backend/
       db.py
    models/
        category.py
        products.py
    router/
       category.py
       products.py
    __init__.py
    main.py
    schemas.py

Модули и объяснения кода
module models/category.py

from app.backend.db import Base
from sqlalchemy import Column, Integer, String, Boolean, ForeignKey
from sqlalchemy.orm import relationship

Импортирует необходимые компоненты из SQLAlchemy и базовый класс Base, который используется для объявлений моделей.

class Category(Base):
    __tablename__ = "categories"
    __table_args__ = {'extend_existing': True}
Определяет класс Category, который наследует от Base.
Устанавливает имя таблицы как categories и позволяет расширять существующую таблицу в случае необходимости.

id = Column(Integer, primary_key=True, index=True)
name = Column(String)
slug = Column(String, unique=True, index=True)
is_active = Column(Boolean, default=True)
parent_id = Column(Integer, ForeignKey("categories.id"), nullable=True)
Определяет поля для таблицы:
id: первичный ключ, индексируемый.
name: название категории.
slug: уникальный индексированный слаг для категории.
is_active: активна ли категория (по умолчанию True).
parent_id: внешний ключ для родителей категорий, может быть NULL.

products = relationship("Product", back_populates="category")
Устанавливает связь с моделью Product, где указывается, что Product имеет обратную связь с Category.

from sqlalchemy.schema import CreateTable
print(CreateTable(Category.__table__))
Импортирует функцию для создания таблицы и выводит SQL-запрос для создания таблицы Category.


module models/products.py

from app.backend.db import Base
from sqlalchemy import Column, ForeignKey, Integer, String, Boolean, Float
from sqlalchemy.orm import relationship
Импортирует необходимые компоненты для определения модели Products.

class Products(Base):
    __tablename__ = "products"
    __table_args__ = {'keep_existing': True}
Определяет класс Products, наследующий от Base.
Устанавливает имя таблицы как products, при этом позволяет сохранить существующие данные в случае конфликта.

id = Column(Integer, primary_key=True, index=True)
name = Column(String)
slug = Column(String, unique=True, index=True)
description = Column(String)
price = Column(Integer)
image_url = Column(String)
stock = Column(Integer)
category_id = Column(Integer, ForeignKey('categories.id'))
rating = Column(Float)
is_active = Column(Boolean, default=True)
Поля для таблицы Products:
id: первичный ключ, индексируемый.
name: название продукта.
slug: уникальный индекс.
description: описание продукта.
price: цена продукта.
image_url: URL изображения.
stock: количество на складе.
category_id: внешний ключ, ссылающийся на categories.id.
rating: рейтинг продукта.
is_active: активен ли продукт (по умолчанию True).


module backend/db.py

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, DeclarativeBase
Импортирует необходимые компоненты для работы с базами данных.

engine = create_engine("sqlite:///ecommerce.db", echo=True)
Создает движок базы данных для SQLite с именем ecommerce.db. Параметр echo=True включает логирование SQL-запросов.

SessionLocal = sessionmaker(bind=engine)
Создает фабрику сессий, которая будет использовать движок engine для подключения к базе данных.

class Base(DeclarativeBase):
    pass
Определяет класс Base, от которого будут наследоваться все модели (Category и Products).
Резюме
Этот код создает структуру, необходимую для работы приложения с базой данных с использованием SQLAlchemy в FastAPI. Модели определяют, как данные будут храниться в таблицах базы данных, а db.py создает соединение и сессии для работы с этой базой.


module models/category.py

from app.backend.db import Base
from sqlalchemy import Column, Integer, String, Boolean, ForeignKey
from sqlalchemy.orm import relationship

class Category(Base):
    __tablename__ = "categories"
    __table_args__ = {'extend_existing': True}
    id = Column(Integer, primary_key = True, index = True)
    name = Column(String)
    slug = Column(String, unique = True, index = True)
    is_active = Column(Boolean, default = True)
    parent_id = Column(Integer, ForeignKey("categories_id"), nullable = True)
    products = relationship("Product", back_populates = "categor")

    from sqlalchemy.schema import CreateTable
    print(CreateTable(Category.__table__))


module models/products.py

from app.backend.db import Base
from sqlalchemy import Column, ForeignKey, Integer, String, Boolean, Float
from sqlalchemy.orm import relationship

class Products(Base):
    __tablename__ = "products"
    __table_args__ = {'keep_existing': True}
    id = Column(Integer, primary_key = True, index = True)
    name = Column(String)
    slug = Column(String, unique = True, index = True)
    description = Column(String)
    price = Column(Integer)
    image_url = Column(String)
    stock = Column(Integer)
    category_id = Column(Integer, ForeignKey('categories.id'))
    rating = Column(Float)
    is_active = Column(Boolean, default = True)


module backend/db.py

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, DeclarativeBase

engine = create_engine("sqlite:///ecommerce.db", echo = True)

SessionLocal = sessionmaker(bind=engine)

class Base(DeclarativeBase):
    pass


