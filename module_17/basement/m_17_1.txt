Разберём структуру проекта и то, что будет в каждом файле.

Файловая структура
app/ — основной каталог приложения.

routers/ — каталог для маршрутов (APIRouter).

__init__.py — делает каталог "routers" пакетом Python.
task.py — содержит маршруты для управления задачами.
user.py — содержит маршруты для управления пользователями.
__init__.py — делает каталог "app" пакетом Python.

main.py — основной файл, где создаётся экземпляр FastAPI и подключаются маршруты.

schemas.py — содержит Pydantic модели для валидации данных.

Что делает каждый оператор в основных файлах
main.py

from fastapi import FastAPI
from routers.task import router as task_router
from routers.user import router as user_router

app = FastAPI()

@app.get("/")
async def read_root():
    return {"message": "Welcome to Taskmanager"}

app.include_router(task_router, prefix="/task", tags=["task"])
app.include_router(user_router, prefix="/user", tags=["user"])
Импортирует FastAPI и маршруты из файлов task.py и user.py.
Создаёт экземпляр FastAPI.
Определяет маршрут для корневого URL (/), который возвращает приветственное сообщение.
Подключает маршруты для задач и пользователей, добавляя соответствующие префиксы и теги.
task.py

from fastapi import APIRouter

router = APIRouter()

@router.get("/")
async def all_tasks():
    pass

@router.get("/{task_id}")
async def task_by_id(task_id: int):
    pass

@router.post("/create")
async def create_task(task: CreateTask):
    pass

@router.put("/update")
async def update_task(task_id: int, task: UpdateTask):
    pass

@router.delete("/delete")
async def delete_task(task_id: int):
    pass
Создаёт экземпляр APIRouter.
Определяет маршруты:
GET / — возвращает все задачи.
GET /{task_id} — возвращает задачу по ID.
POST /create — создаёт новую задачу.
PUT /update — обновляет существующую задачу.
DELETE /delete — удаляет задачу по ID.
user.py

from fastapi import APIRouter

router = APIRouter()

@router.get("/")
async def all_users():
    pass

@router.get("/{user_id}")
async def user_by_id(user_id: int):
    pass

@router.post("/create")
async def create_user(user: CreateUser):
    pass

@router.put("/update")
async def update_user(user_id: int, user: UpdateUser):
    pass

@router.delete("/delete")
async def delete_user(user_id: int):
    pass
Создаёт экземпляр APIRouter.
Определяет маршруты:
GET / — возвращает всех пользователей.
GET /{user_id} — возвращает пользователя по ID.
POST /create — создаёт нового пользователя.
PUT /update — обновляет существующего пользователя.
DELETE /delete — удаляет пользователя по ID.

schemas.py

from pydantic import BaseModel

class CreateUser(BaseModel):
    username: str
    firstname: str
    lastname: str
    age: int

class UpdateUser(BaseModel):
    firstname: str
    lastname: str
    age: int

class CreateTask(BaseModel):
    title: str
    content: str
    priority: int

class UpdateTask(BaseModel):
    title: str
    content: str
    priority: int
Определяет Pydantic модели для валидации данных:
CreateUser и UpdateUser для пользователей.
CreateTask и UpdateTask для задач.
Каждая модель содержит атрибуты, которые будут использоваться при создании или обновлении объектов в базе данных.


Проверка Swagger

Запуск сервера
python -m uvicorn main:app --reload

После запуска, открыть браузер и перейти по адресу http://127.0.0.1:8000/docs. Там автоматически сгенерированная документация Swagger для API.

Теперь есть подготовленная структура для работы с API задач и пользователей!
