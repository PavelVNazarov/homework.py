начнем с описания логики функций в task.py, а затем перейдем к изменениям в user.py.

task.py
Python
Копировать
from fastapi import APIRouter, Depends, status, HTTPException
from sqlalchemy.orm import Session
from backend.db_depends import get_db
from models import Task, User  # Импортируем модели
from schemas import CreateTask, UpdateTask
from sqlalchemy import insert, select, update, delete

router = APIRouter()


@router.get("/")
def all_tasks(db: Session = Depends(get_db)):
    return db.execute(select(Task)).scalars().all()


@router.get("/{task_id}")
def task_by_id(task_id: int, db: Session = Depends(get_db)):
    task = db.execute(select(Task).where(Task.id == task_id)).scalar_one_or_none()
    if task is None:
        raise HTTPException(status_code=404, detail="Task was not found")
    return task


@router.post("/create")
def create_task(task: CreateTask, user_id: int, db: Session = Depends(get_db)):
    user = db.execute(select(User).where(User.id == user_id)).scalar_one_or_none()
    if user is None:
        raise HTTPException(status_code=404, detail="User was not found")

    new_task = Task(**task.dict(), user_id=user_id)
    db.execute(insert(Task).values(new_task))
    db.commit()
    return {'status_code': status.HTTP_201_CREATED, 'transaction': 'Successful'}


@router.put("/update")
def update_task(task_id: int, task: UpdateTask, db: Session = Depends(get_db)):
    task_to_update = db.execute(select(Task).where(Task.id == task_id)).scalar_one_or_none()
    if task_to_update is None:
        raise HTTPException(status_code=404, detail="Task was not found")

    db.execute(update(Task).where(Task.id == task_id).values(**task.dict()))
    db.commit()
    return {'status_code': status.HTTP_200_OK, 'transaction': 'Task update is successful!'}


@router.delete("/delete")
def delete_task(task_id: int, db: Session = Depends(get_db)):
    task_to_delete = db.execute(select(Task).where(Task.id == task_id)).scalar_one_or_none()
    if task_to_delete is None:
        raise HTTPException(status_code=404, detail="Task was not found")

    db.execute(delete(Task).where(Task.id == task_id))
    db.commit()
    return {'status_code': status.HTTP_200_OK, 'transaction': 'Task deleted successfully!'}
user.py
Теперь изменим user.py, чтобы добавить маршрут для получения всех задач конкретного пользователя и удалять все задачи при удалении пользователя.

Python
Копировать
@router.get("/{user_id}/tasks")
def tasks_by_user_id(user_id: int, db: Session = Depends(get_db)):
    tasks = db.execute(select(Task).where(Task.user_id == user_id)).scalars().all()
    return tasks


@router.delete("/delete")
def delete_user(user_id: int, db: Session = Depends(get_db)):
    user_to_delete = db.execute(select(User).where(User.id == user_id)).scalar_one_or_none()
    if user_to_delete is None:
        raise HTTPException(status_code=404, detail="User was not found")

    # Удаляем все задачи, связанные с пользователем
    db.execute(delete(Task).where(Task.user_id == user_id))
    db.execute(delete(User).where(User.id == user_id))
    db.commit()
    return {'status_code': status.HTTP_200_OK, 'transaction': 'User and their tasks deleted successfully!'}
