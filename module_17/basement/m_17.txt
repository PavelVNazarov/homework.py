Шаг 1: Установка необходимых библиотек
Убедитесь, что у Вас установлен Python (рекомендуется версия 3.7 и выше).
Создайте виртуальное окружение (опционально, но рекомендуется):

python -m venv venv
source venv/bin/activate  # на Linux/Mac
venv\Scripts\activate  # на Windows

Установите FastAPI и Uvicorn:

pip install fastapi uvicorn

Шаг 2: Создание структуры каталогов и файлов
Создайте папку для Вашего проекта и перейдите в нее:

mkdir app
cd app

Создайте подкаталог routers:

mkdir routers

Создайте файлы в соответствующих каталогах:

touch routers/__init__.py
touch routers/task.py
touch routers/users.py
touch __init__.py
touch main.py
touch schemas.py

Шаг 3: Реализация маршрутов в task.py и users.py
Файл: routers/task.py

from fastapi import APIRouter

router = APIRouter(prefix="/task", tags=["task"])

@router.get("/")
async def all_tasks():
    pass

@router.get("/{task_id}")
async def task_by_id(task_id: int):
    pass

@router.post("/create")
async def create_task():
    pass

@router.put("/update")
async def update_task():
    pass

@router.delete("/delete")
async def delete_task():
    pass
    
Файл: routers/users.py

from fastapi import APIRouter

router = APIRouter(prefix="/user", tags=["user"])

@router.get("/")
async def all_users():
    pass

@router.get("/{user_id}")
async def user_by_id(user_id: int):
    pass

@router.post("/create")
async def create_user():
    pass

@router.put("/update")
async def update_user():
    pass

@router.delete("/delete")
async def delete_user():
    pass
    
Шаг 4: Реализация основного приложения в main.py
Файл: main.py

from fastapi import FastAPI
from routers import task, users

app = FastAPI()

app.include_router(task.router)
app.include_router(users.router)

@app.get("/")
async def root():
    return {"message": "Welcome to Taskmanager"}
    
Шаг 5: Создание схем в schemas.py
Файл: schemas.py

from pydantic import BaseModel

class CreateUser(BaseModel):
    username: str
    firstname: str
    lastname: str
    age: int

class UpdateUser(BaseModel):
    firstname: str
    lastname: str
    age: int

class CreateTask(BaseModel):
    title: str
    content: str
    priority: int

class UpdateTask(BaseModel):
    title: str
    content: str
    priority: int
    
Шаг 6: Запуск приложения
Теперь Ваше приложение готово к запуску. Выполните следующую команду в корневом каталоге приложения:


uvicorn main:app --reload

Шаг 7: Доступ к Swagger UI
После запуска сервера, откройте в браузере адрес: http://127.0.0.1:8000/docs для доступа к Swagger UI, где Вы сможете увидеть автоматически сгенерированную документацию для Вашего API.

Шаг 8: Загрузка на GitHub
Создайте новый репозиторий на GitHub.
Вставьте все файлы Вашего проекта в этот репозиторий.
Добавьте и закоммитьте с изменениями:

git add .
git commit -m "Initial commit"
git push origin main

Поделитесь ссылкой на Ваш репозиторий.

Задание 17_2
Шаг 1: Установка необходимых библиотек
Убедитесь, что у Вас установлены необходимые библиотеки. В Вашем окружении Python выполните команду:

pip install fastapi uvicorn sqlalchemy

Шаг 2: Создание структуры проекта
Создайте необходимую структуру каталогов и файлов, как указано:

app/
    backend/
        db.py
    models/
        __init__.py
        task.py
        users.py
    routers/
        __init__.py
        task.py
        users.py
    __init__.py
    main.py
    schemas.py

Шаг 3: Реализация базы данных и моделей
В Вашем проекте заполните следующие файлы:

1. backend/db.py

from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

DATABASE_URL = 'sqlite:///taskmanager.db'

engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

2. models/task.py

from sqlalchemy import Column, Integer, String, Boolean, ForeignKey
from sqlalchemy.orm import relationship
from app.backend.db import Base

class Task(Base):
    __tablename__ = 'tasks'

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String)
    content = Column(String)
    priority = Column(Integer, default=0)
    completed = Column(Boolean, default=False)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=False, index=True)
    slug = Column(String, unique=True, index=True)

    user = relationship("User", back_populates="tasks")

3. models/users.py

from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import relationship
from app.backend.db import Base

class User(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String)
    firstname = Column(String)
    lastname = Column(String)
    age = Column(Integer)
    slug = Column(String, unique=True, index=True)

    tasks = relationship("Task", back_populates="user")

4. models/__init__.py
Добавьте следующие строки кода:

from .users import User
from .task import Task

Шаг 4: Создание таблиц и вывод SQL-запросов
Для создания таблиц и печати SQL-запросов обновите Ваш файл main.py:

from fastapi import FastAPI
from app.backend.db import engine
from app.models import Base

app = FastAPI()

# Создание таблиц
Base.metadata.create_all(bind=engine)

@app.get("/")
def read_root():
    return {"message": "Welcome to Taskmanager"}

# Запуск приложения
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

Шаг 5: Запуск Вашего приложения
Запустите сервер Вашего FastAPI приложения с помощью команды:

python -m uvicorn app.main:app --reload

Шаг 6: Завершение
После завершения всех вышеуказанных шагов, Ваш проект должен быть готов. Не забудьте загрузить все файлы Вашего проекта на GitHub.

Готовая версия
Теперь у Вас должны быть две модели, связанные один (User) к многим (Task), и у Вас должен быть дополнительно настроенный файл базы данных. Обязательно проверьте, что Ваше приложение работает, и таблицы создаются корректно.


Задание 17_3
Шаг 1: Установка Alembic
Убедитесь, что Alembic установлен. Выполните команду:

pip install alembic

Шаг 2: Инициализация Alembic
Инициализируйте Alembic. В корневой папке Вашего проекта выполните команду:

alembic init migrations

После этого будет создана структура папок:

app/
    backend/
    migrations/
        versions/
        env.py
        README
        script.py.mako
    models/
        __init__.py
        task.py
        users.py
    routers/
        __init__.py
        task.py
        users.py
    __init__.py
    main.py
    schemas.py
alembic.ini


Шаг 3: Настройка alembic.ini
Откройте файл alembic.ini и измените строку sqlalchemy.url, указав путь к Вашей базе данных:

TOML, also INI

sqlalchemy.url = sqlite:///taskmanager.db

Шаг 4: Настройка env.py
Откройте файл migrations/env.py и внесите следующие изменения:

Импортируйте модели и базовый класс:

from app.models import User, Task  # Добавьте эту строку
from app.backend.db import Base    # Импортируйте Ваш базовый класс

После target_metadata = добавьте:

target_metadata = Base.metadata

Шаг 5: Генерация первой миграции
Сгенерируйте первую миграцию, выполнив команду в корне проекта:

alembic revision --autogenerate -m "Initial migration"
Это создаст в папке migrations/versions файл с версией миграции.

Шаг 6: Просмотр базы данных
Используя инструмент для работы с SQLite, откройте базу данных taskmanager.db. Ваша база данных должна содержать одну таблицу для версий миграций.

Шаг 7: Применение миграции
Теперь выполните команду, чтобы применить последнюю миграцию:

alembic upgrade head
После выполнения этой команды в базе данных должны быть созданы таблицы User и Task, а также запись текущей версии миграции.

Шаг 8: Загрузка проекта на GitHub
Проверьте, что все изменения сохранены.
Создайте новый репозиторий на GitHub, если он ещё не создан.
Добавьте все файлы проекта в git и сделайте коммит:

git add .
git commit -m "Setup FastAPI project with Alembic migrations"

Опубликуйте изменения:

git push origin main
Теперь Ваш проект должен быть готов, и Вы можете отправить ссылку на Ваш репозиторий GitHub. 


Задание _17_4
1. Установка необходимых библиотек
Убедитесь, что у Вас установлен пакет python-slugify, если Вы ещё этого не сделали. Используйте команду:

pip install python-slugify

2. Создание файла для подключения к БД
Создайте файл db_depends.py в директории backend и добавьте в него функцию для подключения к базе данных. Например:

from sqlalchemy.orm import Session
from .db import SessionLocal

def get_db() -> Session:
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

3. Импорт необходимых модулей в routers/users.py
Импортируйте все необходимые классы и функции в начале файла routers/users.py:

from fastapi import APIRouter, Depends, status, HTTPException
from sqlalchemy.orm import Session
from backend.db_depends import get_db
from typing import Annotated
from models import User
from schemas import CreateUser, UpdateUser
from sqlalchemy import insert, select, update, delete
from slugify import slugify

router = APIRouter(prefix="/user", tags=["user"])

4. Реализация маршрутов в users.py
Теперь реализуйте функции маршрутов, как указано:

@router.get("/")
def all_users(db: Annotated[Session, Depends(get_db)]):
    users = db.execute(select(User)).scalars().all()
    return users

@router.get("/{user_id}")
def user_by_id(user_id: int, db: Annotated[Session, Depends(get_db)]):
    user = db.execute(select(User).where(User.id == user_id)).scalar_one_or_none()
    if user is None:
        raise HTTPException(status_code=404, detail="User was not found")
    return user

@router.post("/create")
def create_user(user: CreateUser, db: Annotated[Session, Depends(get_db)]):
    slug = slugify(user.username)
    new_user = User(
        username=user.username,
        firstname=user.firstname,
        lastname=user.lastname,
        age=user.age,
        slug=slug
    )
    db.execute(insert(User).values(new_user.__dict__))
    db.commit()
    return {'status_code': status.HTTP_201_CREATED, 'transaction': 'Successful'}

@router.put("/update/{user_id}")
def update_user(user_id: int, user: UpdateUser, db: Annotated[Session, Depends(get_db)]):
    existing_user = db.execute(select(User).where(User.id == user_id)).scalar_one_or_none()
    if existing_user is None:
        raise HTTPException(status_code=404, detail="User was not found")

    db.execute(
        update(User).where(User.id == user_id).values(**user.dict())
    )
    db.commit()
    return {'status_code': status.HTTP_200_OK, 'transaction': 'User update is successful!'}

@router.delete("/delete/{user_id}")
def delete_user(user_id: int, db: Annotated[Session, Depends(get_db)]):
    existing_user = db.execute(select(User).where(User.id == user_id)).scalar_one_or_none()
    if existing_user is None:
        raise HTTPException(status_code=404, detail="User was not found")

    db.execute(delete(User).where(User.id == user_id))
    db.commit()
    return {'status_code': status.HTTP_200_OK, 'transaction': 'User deletion is successful!'}

5. Тестирование через Swagger
Запустите сервер FastAPI, если он ещё не запущен:

uvicorn main:app --reload

6. Проверка работы API
Создайте три записи в таблице User с указанными параметрами.
Измените запись с id=3.
Удалите запись с id=2.
Выведите всех пользователей.

7. Обновление репозитория
Не забудьте обновить Ваш репозиторий на GitHub с измененными файлами:

git add .
git commit -m "Add user management functionality"
git push


Задание 17_5
добавим маршрутизацию для управления заданиями (tasks). Ниже приведены шаги, которые помогут Вам реализовать описанную логику для файла task.py.

Подготовка:
Убедитесь, что у Вас установлен пакет SQLAlchemy и все зависимости, включая FastAPI.
Структура файла task.py:

from fastapi import APIRouter, Depends, status, HTTPException
from sqlalchemy.orm import Session
from backend.db_depends import get_db
from typing import Annotated
from models import Task, User
from schemas import CreateTask, UpdateTask
from sqlalchemy import select, insert, update, delete

router = APIRouter(tags=["task"])

# Функция получения всех заданий
@router.get("/")
def all_tasks(db: Annotated[Session, Depends(get_db)]):
    tasks = db.execute(select(Task)).scalars().all()
    return tasks

# Функция получения задания по ID
@router.get("/task_id")
def task_by_id(task_id: int, db: Annotated[Session, Depends(get_db)]):
    task = db.execute(select(Task).where(Task.id == task_id)).scalar_one_or_none()
    if task is None:
        raise HTTPException(status_code=404, detail="Task was not found")
    return task

# Функция создания задания
@router.post("/create")
def create_task(task: CreateTask, user_id: int, db: Annotated[Session, Depends(get_db)]):
    user = db.execute(select(User).where(User.id == user_id)).scalar_one_or_none()
    if user is None:
        raise HTTPException(status_code=404, detail="User was not found")

    new_task = Task(**task.dict(), user_id=user_id)
    db.execute(insert(Task).values(new_task))
    db.commit()
    return {'status_code': status.HTTP_201_CREATED, 'transaction': 'Successful'}

# Функция обновления задания
@router.put("/update")
def update_task(task_id: int, task: UpdateTask, db: Annotated[Session, Depends(get_db)]):
    task_to_update = db.execute(select(Task).where(Task.id == task_id)).scalar_one_or_none()
    if task_to_update is None:
        raise HTTPException(status_code=404, detail="Task was not found")

    db.execute(update(Task).where(Task.id == task_id).values(task.dict()))
    db.commit()
    return {'status_code': status.HTTP_200_OK, 'transaction': 'Task update is successful!'}

# Функция удаления задания
@router.delete("/delete")
def delete_task(task_id: int, db: Annotated[Session, Depends(get_db)]):
    task_to_delete = db.execute(select(Task).where(Task.id == task_id)).scalar_one_or_none()
    if task_to_delete is None:
        raise HTTPException(status_code=404, detail="Task was not found")

    db.execute(delete(Task).where(Task.id == task_id))
    db.commit()
    return {'status_code': status.HTTP_200_OK, 'transaction': 'Task deleted successfully!'}

# Функция получения задач конкретного пользователя
@router.get("/user_id/tasks")
def tasks_by_user_id(user_id: int, db: Annotated[Session, Depends(get_db)]):
    tasks = db.execute(select(Task).where(Task.user_id == user_id)).scalars().all()
    return tasks

Обновление user.py для удаления связанных задач:
Убедитесь, что в функции delete_user Вы также удаляете задачи пользователя:

@router.delete("/delete")
def delete_user(user_id: int, db: Annotated[Session, Depends(get_db)]):
    user_to_delete = db.execute(select(User).where(User.id == user_id)).scalar_one_or_none()
    if user_to_delete is None:
        raise HTTPException(status_code=404, detail="User was not found")

    # Удаляем все задачи, связанные с пользователем
    db.execute(delete(Task).where(Task.user_id == user_id))
    db.execute(delete(User).where(User.id == user_id))
    db.commit()
    return {'status_code': status.HTTP_200_OK, 'transaction': 'User and their tasks deleted successfully!'}

Пример действий через Swagger:
Создайте 4 записи Task, используя маршруты, которые Вы только что создали:

FirstTask, SecondTask для User с id=1.
ThirdTask, FourthTask для User с id=3.
Удалите запись Task с id=3.

Удалите пользователя с id=1, и убедитесь, что связанные задачи также были удалены.

Выведите оставшиеся задачи через новый маршрут.

Загрузка проекта в GitHub


Чтобы продолжить работу с проектом, хранящимся на GitHub, и чтобы вывести оставшиеся задачи через новый маршрут, следуйте инструкциям ниже.

Шаг 1: Клонирование проекта с GitHub
Клонируйте репозиторий.
Для этого откройте терминал и введите команду:

git clone https://github.com/your-username/your-repo-name.git

Замените your-username и your-repo-name на Ваше имя пользователя и название репозитория соответственно.

Перейдите в директорию проекта.

cd your-repo-name

Убедитесь, что у Вас установлены все необходимые библиотеки.
Если Вы используете виртуальное окружение, создайте его и активируйте:

python -m venv venv
source venv/bin/activate  # на Linux или Mac
venv\Scripts\activate  # на Windows

Затем установите все зависимости:

pip install -r requirements.txt

Шаг 2: Создание нового маршрута для получения оставшихся задач
Теперь давайте добавим новый маршрут в файл task.py, который будет возвращать оставшиеся (неудалённые) задачи.

Откройте файл app/routers/task.py.

Импортируйте необходимые модули:
Убедитесь, что у Вас есть следующие импорты:

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from backend.db_depends import get_db
from models import Task

Создайте новый маршрут.
Добавьте следующий код для нового маршрута, который возвращает все оставшиеся задачи:

@router.get("/remaining", response_model=List[Task])
def remaining_tasks(db: Session = Depends(get_db)):
    tasks = db.execute(select(Task)).scalars().all()
    return tasks


Добавьте новый импорт, если это необходимо:
Если у Вас еще нет импорта List, добавьте его:

from typing import List

Шаг 3: Запуск приложения и проверка работы маршрута
Запустите Ваш FastAPI сервер.
Используйте следующую команду в терминале:

python -m uvicorn app.main:app --reload

Откройте Swagger UI.
Перейдите в браузере по адресу:

http://127.0.0.1:8000/docs

Проверьте новый маршрут.
Найдите новый маршрут GET /remaining в Swagger UI и выполните его. Вы должны увидеть все оставшиеся задачи.

Шаг 4: Загрузка изменений на GitHub
После того как Вы внесли изменения и протестировали новый маршрут, не забудьте загрузить их обратно в репозиторий GitHub:

Добавьте изменённые файлы.

git add .

Сделайте коммит.

git commit -m "Added route for remaining tasks"

Отправьте изменения на GitHub.

git push origin main
