Этот код реализует простой перцептрон, который обучается решать логическую операцию "И" (AND). Рассмотрим каждый оператор и его назначение.

Импортируем библиотеки

import numpy as np
Импортирует библиотеку NumPy, которая используется для работы с массивами и матричными операциями.

Определяем функцию активации

def step_function(x):
    return np.where(x >= 0, 1, 0)
Функция активации (шаговая функция) возвращает 1, если входное значение больше или равно 0, и 0 в противном случае.

Определяем класс перцептрона

class Perceptron:
Создает класс для перцептрона.

Конструктор класса

def __init__(self, input_size, learning_rate=0.01, epochs=1000):
    self.W = np.zeros(input_size + 1)
    self.learning_rate = learning_rate
    self.epochs = epochs
input_size: количество входных значений (в данном случае 2).
self.W: инициализация весов нулями (дополнительно добавляется_bias` для учета смещения).
learning_rate: скорость обучения.
epochs: количество итераций обучения.
Метод предсказания

def predict(self, x):
    return step_function(np.dot(self.W, x))
Метод, который делает предсказание, вычисляя скалярное произведение весов и входного вектора, затем передавая результат в функцию активации.

Метод обучения

def train(self, X, y):
    for _ in range(self.epochs):
        for xi, target in zip(X, y):
            xi = np.insert(xi, 0, 1)  # Вставка смещения (bias)
            prediction = self.predict(xi)
            self.W += self.learning_rate * (target - prediction) * xi
Первый цикл проходит по количеству эпох.
Второй цикл проходит по каждому входному примеру xi и целевой метке target.
Используется np.insert для добавления значения смещения (bias) в входной вектор.
Обновляются веса на основе разницы между предсказанием и истинной меткой, умноженной на xi.
Данные для обучения

X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y = np.array([0, 0, 0, 1])  # Операция И (AND)
Создание обучающего набора данных для логической операции "И".

Создание и обучение перцептрона

perceptron = Perceptron(input_size=2)
perceptron.train(X, y)
Создание экземпляра перцептрона с 2 входами и обучение на заданных данных.

Тестирование

for xi in X:
    xi_with_bias = np.insert(xi, 0, 1)  # Вставка смещения (bias) для тестирования
    print(f"{xi} -> {perceptron.predict(xi_with_bias)}")
Цикл проходит по всем входным данным, добавляя смещение и выводя предсказание перцептрона для каждого примера.

Резюме
Этот код демонстрирует основной принцип работы перцептрона как бинарного классификатора, который может решать простые логические задачи.
