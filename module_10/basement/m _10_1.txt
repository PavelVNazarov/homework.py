# Назаров ПВ
# module _10_1.py
код по частям.

Импорт библиотек:

Python
Копировать
from time import sleep
from threading import Thread
from datetime import datetime
sleep: используется для приостановки выполнения программы на заданное время.
Thread: позволяет создавать и управлять потоками.
datetime: используется для работы с датой и временем.
Функция write_words:

Python
Копировать
def write_words(word_count, file_name):
    with open(file_name, 'w', encoding='utf-8') as file:
        for num in range(word_count):
            file.write(f"Какое-то слово № {num+1}"'\n')
            sleep(0.1)
        print(f"Завершилась запись в файл {file_name}")
Эта функция принимает два аргумента: word_count (количество слов для записи) и file_name (имя файла).
Открывает файл для записи (если файл не существует, он будет создан).
В цикле записывает заданное количество строк в файл, при этом делает паузу в 0.1 секунды между записями.
После завершения записи выводит сообщение о завершении.
Запись в файлы последовательно:

Python
Копировать
time_start = datetime.now()
write_words(10, 'example1.txt')
write_words(30, 'example2.txt')
write_words(200, 'example3.txt')
write_words(100, 'example4.txt')
Здесь фиксируется время начала выполнения.
Последовательно вызываются функции write_words для записи в четыре разных файла.
После завершения всех операций фиксируется время окончания и выводится общее время выполнения.
Запись в файлы с использованием потоков:

Python
Копировать
time_start = datetime.now()

thr_first = Thread(target=write_words, args=(10, 'example5.txt'))
thr_second = Thread(target=write_words, args=(30, 'example6.txt'))
thr_thrid = Thread(target=write_words, args=(200, 'example7.txt'))
thr_fourth = Thread(target=write_words, args=(100, 'example8.txt'))

thr_first.start()
thr_second.start()
thr_thrid.start()
thr_fourth.start()

thr_first.join()
thr_second.join()
thr_thrid.join()
thr_fourth.join()

time_end = datetime.now()
time_result = time_end - time_start
print(f'Работа потоков {time_result}')
Снова фиксируется время начала выполнения.
Создаются четыре потока, каждый из которых будет выполнять функцию write_words с разными аргументами.
start(): запускает каждый поток.
join(): ожидает завершения каждого потока, чтобы основной поток (где выполняется код) не продолжал выполнение, пока все потоки не завершатся.
После завершения всех потоков фиксируется время окончания и выводится общее время выполнения.
Таким образом, код демонстрирует, как можно использовать потоки для параллельной записи в файлы, что может значительно сократить общее время выполнения по сравнению с последовательной записью.
