

код по частям.

Импортируемые модули
Python
Копировать
from time import sleep
from threading import Thread
import requests
sleep: используется для приостановки выполнения программы на заданное количество секунд.
Thread: класс для создания и управления потоками.
requests: модуль для работы с HTTP-запросами (в данном коде не используется).
Определение класса Knight
Python
Копировать
class Knight(Thread):
    def __init__(self, name, power):
        super().__init__()
        self.name = name
        self.power = power
class Knight(Thread): создается класс Knight, который наследует от Thread, что позволяет ему работать в отдельном потоке.
__init__: конструктор класса, который принимает имя (name) и силу (power) рыцаря. super().__init__() инициализирует родительский класс Thread.
Метод run
Python
Копировать
def run(self):
    print(f'{self.name}, на нас напали!')
    solt = 100
    days = 0

    while solt > 0:
        solt -= self.power
        days += 1
        print(f'{self.name}, сражается {days} день(дня)..., осталось {solt} воинов.')
        sleep(1)
    print(f'{self.name}, одержал победу спустя {days} дней!')
run: метод, который выполняется при запуске потока.
print(f'{self.name}, на нас напали!'): выводит сообщение о нападении.
solt = 100: устанавливает начальное количество воинов.
days = 0: счетчик дней.
while solt > 0: цикл, который продолжается, пока есть воины.
solt -= self.power: уменьшает количество воинов на силу рыцаря.
days += 1: увеличивает счетчик дней.
print(...): выводит информацию о текущем состоянии битвы.
sleep(1): приостанавливает выполнение на 1 секунду.
print(f'{self.name}, одержал победу спустя {days} дней!'): выводит сообщение о победе.
Создание и запуск потоков
Python
Копировать
first_knight = Knight('Sir Lancelot', 10)
second_knight = Knight("Sir Galahad", 20)
first_knight.start()
second_knight.start()
first_knight.join()
second_knight.join()
print('Все битвы закончились!')
first_knight = Knight('Sir Lancelot', 10): создает экземпляр рыцаря Ланселота с силой 10.
second_knight = Knight("Sir Galahad", 20): создает экземпляр рыцаря Галада с силой 20.
first_knight.start(): запускает поток для первого рыцаря, вызывая метод run.
second_knight.start(): запускает поток для второго рыцаря.
first_knight.join(): ждет завершения потока первого рыцаря.
second_knight.join(): ждет завершения потока второго рыцаря.
print('Все битвы закончились!'): выводит сообщение о завершении всех битв.
