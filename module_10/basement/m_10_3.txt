код по частям.

Импортируемые модули
Python
Копировать
from time import sleep
from threading import Thread, Lock
from random import randint
sleep: используется для приостановки выполнения программы на заданное время.
Thread: позволяет создавать и управлять потоками.
Lock: используется для синхронизации потоков, чтобы избежать конфликтов при доступе к общим ресурсам.
randint: генерирует случайные целые числа в заданном диапазоне.
Создание блокировки
Python
Копировать
lock = Lock()
Создается объект блокировки, который будет использоваться для синхронизации потоков.
Класс Bank
Python
Копировать
class Bank():
    def __init__(self, balance = 0):
        self.balance = balance
        self.lock = Lock()
Определяется класс Bank, который имеет атрибут balance (начальный баланс равен 0) и объект блокировки lock.
Метод deposit
Python
Копировать
def deposit(self):
    for _ in range(100):
        donat = randint(50,500)
        self.balance += donat
        if self.balance >= 500 and lock.locked():
            lock.release()

        print(f"Пополнение: {donat}. Баланс: {self.balance}")
        sleep(0.001)
    return self.balance
Метод deposit выполняет 100 итераций, в каждой из которых:
Генерирует случайное число donat от 50 до 500.
Увеличивает баланс на donat.
Если баланс достигает 500 и блокировка активна, она освобождается (но это условие может быть ошибочным, так как lock.locked() проверяет, заблокирована ли блокировка, а не освобождает её).
Печатает информацию о пополнении и текущем балансе.
Приостанавливает выполнение на 0.001 секунды.
Метод take
Python
Копировать
def take(self):
    for _ in range(100):
        donat = randint(50,500)
        print(f"Запрос на {donat}")

        if self.balance >= donat:
            self.balance -= donat
            print(f"Снятие: {donat}. Баланс: {self.balance}")
        else:
            print(f"Запрос отклонён, недостаточно средств")
            lock.acquire()

        sleep(0.001)
    return self.balance
Метод take также выполняет 100 итераций:
Генерирует случайное число donat.
Печатает запрос на снятие.
Если баланс достаточен, он уменьшается на donat, и выводится информация о снятии.
Если средств недостаточно, выводится сообщение об отклонении запроса, и блокировка захватывается (но это может привести к блокировке, если не будет освобождена).
Приостанавливает выполнение на 0.001 секунды.
Создание объекта Bank и потоков
Python
Копировать
Hoper = Bank()

deposit_donat = Thread(target = Hoper.deposit, args = ())
deposit_take = Thread(target = Hoper.take, args = ())
Создается объект Hoper класса Bank.
Создаются два потока: один для метода deposit, другой для метода take.
Запуск потоков
Python
Копировать
deposit_donat.start()
deposit_take.start()
deposit_donat.join()
deposit_take.join()
Запускаются оба потока.
join() используется для ожидания завершения потоков перед продолжением выполнения основного потока.
Итоговый баланс
Python
Копировать
print(f"Итоговый баланс: {Hoper.balance}")
Печатается итоговый баланс после завершения работы потоков.
Замечания
В методах deposit и take есть ошибки с использованием блокировок. Например, lock.release() и lock.acquire() могут привести к ошибкам, если блокировка не была захвачена.
Необходимо использовать блокировки для защиты доступа к self.balance, чтобы избежать гонок данных.
