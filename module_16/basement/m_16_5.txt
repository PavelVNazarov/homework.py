# Установка зависимостей
# Если еще не установлен FastAPI и Jinja2:


# pip install fastapi uvicorn jinja2
# Код приложения

from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from pydantic import BaseModel
from typing import List
from fastapi import Depends

app = FastAPI()
templates = Jinja2Templates(directory="templates")

# Пустой список пользователей
users = []

# Модель User
class User(BaseModel):
    id: int
    username: str
    age: int

# Начальные пользователи
initial_users = [
    User(id=1, username="UrbanUser", age=24),
    User(id=2, username="UrbanTest", age=22),
    User(id=3, username="Capybara", age=60)
]
users.extend(initial_users)

@app.get("/", response_class=HTMLResponse)
async def read_root(request: Request):
    return templates.TemplateResponse("users.html", {"request": request, "users": users})

@app.get("/user/{user_id}", response_class=HTMLResponse)
async def get_user(request: Request, user_id: int):
    for user in users:
        if user.id == user_id:
            return templates.TemplateResponse("users.html", {"request": request, "user": user})
    raise HTTPException(status_code=404, detail="User was not found")

@app.post("/user/{username}/{age}", response_model=User)
async def create_user(username: str, age: int) -> User:
    new_id = 1 if not users else users[-1].id + 1
    new_user = User(id=new_id, username=username, age=age)
    users.append(new_user)
    return new_user

@app.put("/user/{user_id}/{username}/{age}", response_model=User)
async def update_user(user_id: int, username: str, age: int) -> User:
    for user in users:
        if user.id == user_id:
            user.username = username
            user.age = age
            return user
    raise HTTPException(status_code=404, detail="User was not found")

@app.delete("/user/{user_id}", response_model=User)
async def delete_user(user_id: int) -> User:
    for user in users:
        if user.id == user_id:
            users.remove(user)
            return user
    raise HTTPException(status_code=404, detail="User was not found")




#Шаблон users.html
#Создать файл users.html в папке templates с следующим содержимым:


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Users List</title>
</head>
<body>
    <h1>Users List</h1>
    <ul>
        {% for user in users %}
        <li>
            <a href="/user/{{ user.id }}">{{ user.username }}</a> - {{ user.age }} years old
        </li>
        {% endfor %}
    </ul>

    {% if user %}
        <h2>User Details</h2>
        <p>ID: {{ user.id }}</p>
        <p>Username: {{ user.username }}</p>
        <p>Age: {{ user.age }}</p>
        <a href="/">Back to Users List</a>
    {% endif %}
</body>
</html>


# Запуск приложения
# Теперь запустить FastAPI приложение с помощью uvicorn:

# uvicorn main:app --reload
# Проверка
# Зайти на адрес http://127.0.0.1:8000/ для просмотра списка пользователей.
# Кликнуть на имя пользователя, чтобы увидеть детали о нем по маршруту /user/{user_id}.
