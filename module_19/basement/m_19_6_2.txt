Шаг 1: Установка и создание проекта
Установите Django и psycopg2 (для работы с PostgreSQL):

pip install django psycopg2

Создайте новый проект Django:

django-admin startproject myproject
cd myproject

Создайте новое приложение внутри проекта:

python manage.py startapp myapp

Шаг 2: Настройка баз данных
Откройте файл settings.py в каталоге myproject и измените секцию DATABASES следующим образом:

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / "db.sqlite3",
    },
    'postgres': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'your_db_name',
        'USER': 'your_db_user',
        'PASSWORD': 'your_password',
        'HOST': 'localhost',
        'PORT': '5432'
    }
}

Замените your_db_name, your_db_user и your_password на соответствующие значения для Вашей базы данных PostgreSQL.

Шаг 3: Создание модели
Добавьте следующую модель в файл models.py Вашего приложения myapp:

from django.db import models

class Product(models.Model):
    name = models.CharField(max_length=100)
    price = models.DecimalField(max_digits=10, decimal_places=2)

    def __str__(self):
        return self.name
        
Шаг 4: Примените миграции
Теперь выполним миграции для создания таблиц в SQLite:

python manage.py makemigrations
python manage.py migrate

Шаг 5: Перенос модели в PostgreSQL
Чтобы перенести созданную ранее модель Product в PostgreSQL, необходимо изменить файл settings.py, чтобы использовать PostgreSQL в качестве основной базы данных.

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'your_db_name',
        'USER': 'your_db_user',
        'PASSWORD': 'your_password',
        'HOST': 'localhost',
        'PORT': '5432'
    }
}

Теперь выполните миграции для PostgreSQL:

python manage.py makemigrations
python manage.py migrate

Шаг 6: Создание таблиц в PGAdmin и связь с Django
Откройте PGAdmin и создайте несколько таблиц, например, Category и Customer.
Добавьте соответствующие модели в myapp/models.py:

class Category(models.Model):
    name = models.CharField(max_length=100)

class Customer(models.Model):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    category = models.ForeignKey(Category, on_delete=models.CASCADE)
    
Выполните миграции:

python manage.py makemigrations
python manage.py migrate

Шаг 7: Тестирование запросов с использованием Django ORM
Запустите оболочку Django:

python manage.py shell

Теперь в оболочке выполните следующие запросы:

from myapp.models import Product, Category, Customer

# 1. Получение всех объектов базы данных
products = Product.objects.all()
print(products)

# 2. Получение конкретного объекта по id
product = Product.objects.get(id=1)
print(product)

# 3. Запрос на фильтрацию
filtered_products = Product.objects.filter(price__gt=20.00)
print(filtered_products)

# 4. Добавление нового объекта
new_product = Product(name='New Product', price=30.00)
new_product.save()

# 5. Удаление объекта
product_to_delete = Product.objects.get(id=2)
product_to_delete.delete()

# 6. Подсчет количества объектов (с фильтрацией)
count = Product.objects.filter(price__gt=10.00).count()
print(count)
Следуя этой инструкции, Вы создадите проект Django, подключите базы данных SQLite и PostgreSQL, выполните миграции, создадите и свяжете модели, а также протестируете запросы через Django ORM. 
