Нужно установить в проекте Django пагинатор. Вы можете это сделать в файле settings.py проекта, добавив в список установку следующую строку:
INSTALLED_APPS = [
    # ...
    'django.core.paginator',  # добавляем пагинатор
    # ...
] # models.py
from django.db import models

class Post(models.Model):
    title = models.CharField(max_length=255)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True) # views.py
from django.shortcuts import render
from django.core.paginator import Paginator
from .models import Post

def post_list(request):
    # получаем все посты
    posts = Post.objects.all()
    
    # создаем пагинатор
    paginator = Paginator(posts, 10)  # 10 постов на странице
    
    # получаем номер страницы, на которую переходит пользователь
    page_number = request.GET.get('page')
    
    # получаем посты для текущей страницы
    page_posts = paginator.get_page(page_number)
    
    # передаем контекст в шаблон
    return render(request, 'post_list.html', {'page_posts': page_posts})<!-- post_list.html -->
{% extends 'base.html' %}

{% block content %}
    <h1>Список постов</h1>
    <ul>
        {% for post in page_posts %}
            <li>
                {{ post.title }} ({{ post.created_at }})
                <p>{{ post.content }}</p>
            </li>
        {% empty %}
            <p>Нет постов.</p>
        {% endfor %}
    </ul>
    <!-- показываем пагинатор -->
    <div class="pagination">
        <p>Страницы:</p>
        <ul>
            {% if page_posts.has_previous %}
                <li><a href="?page=1"><<</a></li>
                <li><a href="?page={{ page_posts.previous_page_number }}">Previous</a></li>
            {% endif %}
            <li>{{ page_posts.number }}/{{ paginator.num_pages }}</li>
            {% if page_posts.has_next %}
                <li><a href="?page={{ page_posts.next_page_number }}">Next</a></li>
                <li><a href="?page={{ paginator.num_pages }}">>>></a></li>
            {% endif %}
        </ul>
    </div>
{% endblock %}Можно сделать обработку ошибок как дополнение. Например, если пользователь перешел на страницу, которая не существует, Django выдаст ошибку 404. Чтобы решить эту проблему, мы можем добавить проверку наличия страницы перед переходом на нее:


def post_list(request):
    # ...
    page_number = request.GET.get('page')
    try:
        page_posts = paginator.get_page(page_number)
    except PageNotAnInteger:
        page_posts = paginator.page(1)
    except EmptyPage:
        page_posts = paginator.page(paginator.num_pages)
    
    return render(request, 'post_list.html', {'page_posts': page_posts})
