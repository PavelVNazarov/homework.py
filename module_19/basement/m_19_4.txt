разберем каждый пункт по порядку.

1. Заполнение таблиц данными с помощью SQL-запросов
Предположим, у Вас есть таблица articles с полями id, title, content, и author. Пример SQL-запроса для добавления данных в эту таблицу:

INSERT INTO articles (id, title, content, author) VALUES (1, 'Первый пост', 'Содержимое первого поста', 'Автор 1');
INSERT INTO articles (id, title, content, author) VALUES (2, 'Второй пост', 'Содержимое второго поста', 'Автор 2');

Вы можете многократно использовать этот запрос с разными значениями.

2. Создание объектов в базе данных Django
Чтобы создать объекты в приложении Django, используем метод create(). Предположим, у Вас есть модель Post:

from myapp.models import Post

# Создание объектов

Post.objects.create(title='Первый пост', content='Содержимое первого поста', author='Автор 1')
Post.objects.create(title='Второй пост', content='Содержимое второго поста', author='Автор 2')

3. Изменение одного из элементов статьи
Чтобы изменить заголовок статьи, сначала получите объект, а затем внесите изменения:

post = Post.objects.get(id=1)  # Получаем пост с id = 1
post.title = 'Новый заголовок'
post.save()  # Сохраняем изменения

4. Запрос на получение всех объектов из базы данных
Вы можете получить все объекты из таблицы Post следующим образом:

all_posts = Post.objects.all()  # Получение всех постов

Чтобы вывести их, можно сделать:

for post in all_posts:
    print(post.title)

5. Удаление одного из объектов
Для удаления объекта используется метод delete():

post_to_delete = Post.objects.get(id=1)  # Получаем пост с id = 1
post_to_delete.delete()  # Удаляем пост

6. Фильтрация объектов в базе данных
Чтобы отфильтровать статьи, например, по году публикации, используйте метод filter():
# Фильтр по году

published_posts = Post.objects.filter(pub_date__year=2024)  # Предполагается, что есть поле pub_date

Для фильтрации по автору можно сделать так:

author_posts = Post.objects.filter(author='Автор 1')
