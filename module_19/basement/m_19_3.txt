структура проекта
my_project/
|     my_project/
|    |    __init__.py
|    |    asgi.py
|    |    settings.py
|    |    urls.py
|    |    wsgi.py
|    db.sqlite3
|    manage.py
|     task1/
|    |    migrations/
|    |    |    __init__.py
|    |    __init__.py
|    |    admin.py
|    |    apps.py
|    |    models.py
|    |    tests.py
|    |    urls.py
|    |    views.py
├── templates/
|    |    fifth_task/
|    |    |   <>registration_page.html
|    |    fourth_task/
|    |    |    <>cart.html
|    |    |    <>games.html
|    |    |    <>index.html
|    |    |    <>menu.html
|    |    |    <>platform.html
|    |    |    <>shop.html


Часть 1: Подготовка
Перемещение представлений и шаблонов
Перенесите представления и шаблоны из предыдущих заданий (Главная страница, Список товаров, Корзина, Регистрация) в приложение task1.

Представления (например, views.py):

from django.shortcuts import render
from .models import Game, Buyer

def home(request):
    return render(request, 'task1/home.html')

def product_list(request):
    games = Game.objects.all()
    return render(request, 'task1/product_list.html', {'games': games})

def cart(request):
    return render(request, 'task1/cart.html')

def register(request):
    if request.method == 'POST':
        name = request.POST['name']
        if not Buyer.objects.filter(name=name).exists():
            buyer = Buyer.objects.create(name=name, balance=0, age=18)  # Возраст можно изменить
            buyer.save()
    return render(request, 'task1/register.html')
    
Шаблоны: Создайте папку templates/task1 и добавьте файлы home.html, product_list.html, cart.html и register.html.
Изменение файла urls.py
В urls.py приложения task1 добавьте новые маршруты:

from django.urls import path
from .views import home, product_list, cart, register

urlpatterns = [
    path('', home, name='home'),
    path('products/', product_list, name='product_list'),
    path('cart/', cart, name='cart'),
    path('register/', register, name='register'),
]

Настройка settings.py
Убедитесь, что в Вашем settings.py указаны пути к папкам шаблонов. Например:

TEMPLATES = [
    {
        ...
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        ...
    },
]

Проверка работы сервера
Запустите сервер:

python manage.py runserver
Проверьте, что все страницы работают корректно.

Часть 2: Дополнение QuerySet запросами
Представление регистрации
Измените представление register, чтобы оно проверяло наличие Buyer в базе данных:

def register(request):
    if request.method == 'POST':
        name = request.POST['name']
        if not Buyer.objects.filter(name=name).exists():
            age = int(request.POST['age'])  # Предполагается, что возраст передается в форме
            balance = 0  # Или любое другое значение
            Buyer.objects.create(name=name, balance=balance, age=age)
    return render(request, 'task1/register.html')
    
Представление списка товаров
Передайте список всех игр в контекст шаблона:

def product_list(request):
    games = Game.objects.all()
    return render(request, 'task1/product_list.html', {'games': games})
    
В шаблоне product_list.html измените вывод на:

{% for game in games %}
    <p>{{ game.title }} | {{ game.description }}. Стоимость: {{ game.cost }}<button>Купить</button></p>
{% endfor %}

Проверка
Убедитесь, что Вы добавляете записи в базу данных через форму регистрации.
Используйте DB Browser для проверки добавленных записей.
Коммиты и Push на GitHub
Не забудьте сделать коммиты после каждого значимого изменения и запушить их в Ваш удалённый репозиторий на GitHub:

git add .
git commit -m "Добавил представления и шаблоны в task1"
git push origin main


Часть 1: Объединение представлений и шаблонов из предыдущих заданий.

Копирование файлов: Перенесите все файлы представлений (.py) и шаблонов (.html) из Ваших предыдущих задач (task4 и task5) в папку task1 Вашего текущего проекта.  Убедитесь, что структура папок сохраняется (например, представления могут быть в task1/views.py, а шаблоны в task1/templates/task1/).

Изменение путей в urls.py:  Откройте task1/urls.py. Вам нужно добавить маршруты для всех Ваших представлений.  Пример:

Python
Копировать
from django.urls import path
from . import views

urlpatterns = [
    path('', views.main_page, name='main_page'),  # Главная страница
    path('goods/', views.goods_list, name='goods_list'), # Список товаров
    path('cart/', views.cart, name='cart'), # Корзина
    path('register/', views.register, name='register'), # Регистрация
    # ... другие маршруты ...
]
Замените views.main_page, views.goods_list и т.д. на  имена Ваших функций-представлений.  Убедитесь, что имена маршрутов (name) уникальны.

Настройка settings.py: В Вашем файле settings.py убедитесь, что путь к шаблонам указан корректно. Он должен указывать на директорию, содержащую все Ваши шаблоны:
Python
Копировать
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['путь/к/вашей/папке/templates'], # Замените на Ваш путь
        'APP_DIRS': True,
        'OPTIONS': {
            # ...
        },
    },
]
Изменение путей в представлениях: Откройте Ваши файлы представлений (.py). В функциях render убедитесь, что пути к шаблонам корректны относительно директории templates, указанной в settings.py. Пример:
Python
Копировать
from django.shortcuts import render
# ...
def main_page(request):
    return render(request, 'task1/main.html') # Пример пути к шаблону
Изменение путей в шаблонах:  В Ваших HTML-шаблонах, особенно тех, что наследуют от menu.html, убедитесь, что все пути к статическим файлам (CSS, JS) и другим шаблонам корректны.  Используйте абсолютные пути, если это необходимо для избежания проблем.

Проверка: Запустите сервер Django (python manage.py runserver).  Проверьте, что все Ваши представления работают корректно и отображаются страницы из заданий DTL и Формы.

Часть 2: Добавление QuerySet запросов

Представление регистрации (register):

Получение данных из Buyer:  Замените Ваш псевдо-список пользователей на запрос к базе данных:

Python
Копировать
from .models import Buyer
# ...
def register(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        age = request.POST.get('age')
        # ... другие поля ...

        try:
            existing_buyer = Buyer.objects.get(name=username)  # Проверяем существование
            # сообщение об ошибке, например, через messages.error()
        except Buyer.DoesNotExist:
            new_buyer = Buyer.objects.create(name=username, age=age, # ... другие поля ...)
            # сообщение об успешном добавлении, например, через messages.success()

    # ... остальной код ...
Проверка на существование:  try...except блок обрабатывает ситуацию, когда пользователь уже существует.

Представление списка товаров (goods_list):

Получение игр из Game: Замените Ваш псевдо-список игр на запрос:

Python
Копировать
from .models import Game
# ...
def goods_list(request):
    games = Game.objects.all()
    return render(request, 'task1/goods_list.html', {'games': games})
Изменение шаблона (goods_list.html):  Измените шаблон, чтобы отобразить информацию об играх в нужном формате:

HTML, XML
Копировать
<h1>Список игр</h1>
{% for game in games %}
    <p>{{ game.name }} | {{ game.description }}. Стоимость: {{ game.price }}</p>
    <button>Купить</button>  <!--  Добавьте функционал кнопки позже -->
{% endfor %}
Не забудьте сделать git commit и git push после каждого значимого изменения.

