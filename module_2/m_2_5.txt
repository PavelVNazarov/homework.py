Функция get_matrix(n, m, value)
Определение функции: def get_matrix(n, m, value):

Здесь мы создаем функцию с именем get_matrix, которая принимает три параметра:
n: количество строк в матрице.
m: количество столбцов в матрице.
value: значение, которое будет заполнено в каждой ячейке матрицы.
Инициализация матрицы: matrix = []

Создаем пустой список matrix, который будет использоваться для хранения строк матрицы.
Первый цикл: for i in range(n):

Начинаем цикл, который будет выполняться n раз (то есть, создаем n строк).
Инициализация новой строки: new_w = []

На каждой итерации первого цикла создаем пустой список new_w, который будет представлять одну строку матрицы.
Второй цикл: for j in range(m):

Внутри первого цикла начинается второй цикл, который будет выполняться m раз (то есть, в каждой строке будет m значений).
Заполнение строки: new_w.append(value)

На каждой итерации второго цикла добавляем значение value в список new_w.
Добавление строки в матрицу: matrix.append(new_w)

После завершения второго цикла (как только одна строка полностью заполнена) добавляем ее в матрицу matrix.
Возврат результата: return matrix

После завершения первого цикла (то есть, когда все строки созданы) функция возвращает матрицу matrix.
Вызовы функции и печать результатов
Вызов функции: result1 = get_matrix(2, 2, 10)

Создает матрицу 2x2, заполненную значением 10. Результат: [[10, 10], [10, 10]].
Вызов функции: result2 = get_matrix(3, 5, 42)

Создает матрицу 3x5, заполненную значением 42. Результат: [[42, 42, 42, 42, 42], [42, 42, 42, 42, 42], [42, 42, 42, 42, 42]].
Вызов функции: result3 = get_matrix(4, 2, 13)

Создает матрицу 4x2, заполненную значением 13. Результат: [[13, 13], [13, 13], [13, 13], [13, 13]].
Вывод результатов:

print(result1) — выводит первую матрицу.
print(result2) — выводит вторую матрицу.
print(result3) — выводит третью матрицу.
Итог
В результате выполнения кода на экране будет показано три матрицы с заданными размерами и значениями.

Python
Копировать
[[10, 10], [10, 10]]
[[42, 42, 42, 42, 42], [42, 42, 42, 42, 42], [42, 42, 42, 42, 42]]
[[13, 13], [13, 13], [13, 13], [13, 13]]
